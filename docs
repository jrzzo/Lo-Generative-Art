Overview

This generative art project creates 999 unique pieces of art, each with varying traits, colors, and patterns. The project uses randomness to determine the characteristics of each piece while adhering to predefined rarity rules.

Generations and Total Possibilities

Calculation of Total Possible Generations

The total number of possible generations is determined by the combinations of the variable traits in the code. Below is the breakdown:

Background Colors: 13 options with weighted probabilities.

Palette Sizes: 1 to 13 colors, with rarity weights.

Weighted probabilities favor 2-color and 3-color palettes (~65%).

Rectangles:

Number of Rectangles: Random between 100 to 5000.

Maximum Rectangle Length: Random between 100 to 400.

Minimum Rectangle Length: Random between 50 to 200.

Rectangle Width: Random between 10 to 50.

Color Combinations:

Each palette randomly selects colors from 13 base colors.

Given these variations, the code can theoretically generate billions of unique outputs due to the combinatorial explosion caused by the range of numerical traits and randomization.

Traits

Each piece has the following traits:

Background Color

One of 13 colors selected based on weighted rarity.

Example: "Black" (1/999 chance), "White" (47%), etc.

Palette Size

Number of colors in the palette (1 to 13).

Example: "2-Color Palette" (~40%), "13-Color Palette" (most rare).

Pattern Traits

Number of Rectangles: Between 100 and 5000.

Maximum Rectangle Length: Between 100 and 400.

Minimum Rectangle Length: Between 50 and 200.

Rectangle Width: Between 10 and 50.

These traits are recorded as precise numeric values in the metadata.

Rarity Scale

Background Color Rarity:

Rarest: Black (1 in 999).

Common: White (47%).

Palette Size Rarity:

Common: 2-Color, 3-Color (~65%).

Rare: 1-Color, 13-Color.

Pattern Traits:

Each numeric value (e.g., rectangle count, dimensions) is uniformly distributed within its range, ensuring variability without strict rarity.

Math Breakdown

Weighted Random Selection

The function pickWeightedBackgroundColor uses a cumulative weight approach:

float r = random(1);
float cumulativeWeight = 0;
for (int i = 0; i < backgroundWeights.length; i++) {
  cumulativeWeight += backgroundWeights[i];
  if (r <= cumulativeWeight) {
    return backgroundColors[i];
  }
}

This ensures that rarer background colors like black have a lower chance of being selected compared to common colors like white.

Rectangle Placement

The placement of rectangles is determined by trigonometric calculations:

float t = map(i, 0, numRects, 0, TWO_PI * 300);
float xOff = cos(t) * (50 + i / 1);
float yOff = sin(t) * (50 + i / 1);

Here, rectangles are placed in a radial pattern, with increasing distance from the center.

Metadata Generation

Numeric traits are stored in the metadata:

metadata.setFloat("maxRectLength", maxRectLength);
metadata.setFloat("minRectLength", minRectLength);
metadata.setFloat("rectWidth", rectWidth);
metadata.setInt("numRects", numRects);

Line-by-Line Code Breakdown

Setup and Initialization

void setup() {
  size(2080, 2080);
  noLoop();

  File folder = new File(sketchPath("output"));
  if (!folder.exists()) {
    folder.mkdir();
  }

  for (int i = 0; i < 999; i++) {
    generateFrame(i);
    saveFrame("output/frame" + nf(i, 4) + ".png");
    saveMetadata(i);
  }
}

Purpose: Initializes the canvas, creates the output folder, and generates 999 pieces of art.

Key Functions: generateFrame, saveFrame, saveMetadata.

Background Color Selection

color pickWeightedBackgroundColor() {
  float r = random(1);
  float cumulativeWeight = 0;
  for (int i = 0; i < backgroundWeights.length; i++) {
    cumulativeWeight += backgroundWeights[i];
    if (r <= cumulativeWeight) {
      return backgroundColors[i];
    }
  }
  return backgroundColors[backgroundColors.length - 1];
}

Purpose: Selects a background color based on rarity weights.

Palette Generation

color[] generateRandomPalette() {
  int numColors = pickPaletteSize();
  color[] palette = new color[numColors];
  for (int i = 0; i < numColors; i++) {
    palette[i] = baseColors[int(random(baseColors.length))];
  }
  return palette;
}

Purpose: Creates a random color palette of a specified size.

Rarity Rule: Palette size is determined by weighted probabilities.

Pattern Drawing

void drawPattern(color[] currentPalette) {
  float centerX = width / random(2, 4);
  float centerY = height / random(1, 4);

  for (int i = 0; i < numRects; i++) {
    float t = map(i, 0, numRects, 0, TWO_PI * 300);
    float xOff = cos(t) * (50 + i / 1);
    float yOff = sin(t) * (50 + i / 1);

    float x = centerX + xOff;
    float y = centerY + yOff;
    float angle = atan2(yOff, xOff);

    float rectLength = random(minRectLength, maxRectLength);

    pushMatrix();
    translate(x, y);
    rotate(angle);
    fill(currentPalette[int(random(currentPalette.length))]);
    stroke(0);
    strokeWeight(4);
    rect(0, 0, rectLength, rectWidth);
    popMatrix();
  }
}

Purpose: Draws rectangles in a radial pattern using trigonometric functions.

Metadata Saving

void saveMetadata(int index, color backgroundColor) {
  JSONObject metadata = new JSONObject();

  metadata.setString("name", "lo #" + index);
  metadata.setString("description", "lo (" + index + ")");
  metadata.setString("image", "https://arweave.net/abcd1234xyz/frame" + nf(index, 4) + ".png");

  metadata.setFloat("maxRectLength", maxRectLength);
  metadata.setFloat("minRectLength", minRectLength);
  metadata.setFloat("rectWidth", rectWidth);
  metadata.setInt("numRects", numRects);
  metadata.setString("background", colorToString(backgroundColor));

  String filePath = sketchPath("output/metadata_" + nf(index, 4) + ".json");
  saveJSONObject(metadata, filePath);
}

Purpose: Stores the traits and metadata for each generated piece as a JSON file.

Additional Notes

This project leverages randomness and probability to achieve both uniqueness and adherence to a rarity structure. The use of JSON metadata ensures compatibility with platforms that support generative art and NFTs.

