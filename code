import java.io.File;

int numRects;
float maxRectLength;
float minRectLength;
float rectWidth;

color[] backgroundColors = {
  color(0),
  color(255),
  color(0, 0, 139),
  color(217, 37, 37),
  color(255, 127, 0),
  color(135, 206, 235),
  color(139, 69, 19),
  color(255, 255, 0),
  color(0, 255, 255),
  color(30, 144, 255),
  color(0, 100, 0),
  color(34, 139, 34),
  color(218, 165, 32),
};

float[] backgroundWeights = {
  0.001,
  0.47,
  0.15,
  0.1,
  0.07,
  0.06,
  0.003,
  0.04,
  0.03,
  0.02,
  0.02,
  0.015,
  0.015
};

color[] baseColors = {
  color(217, 37, 37),
  color(255, 0, 0),
  color(255, 127, 0),
  color(255, 255, 0),
  color(255),
  color(0, 255, 255),
  color(135, 206, 235),
  color(30, 144, 255),
  color(0, 0, 139),
  color(0, 100, 0),
  color(34, 139, 34),
  color(218, 165, 32),
  color(139, 69, 19)
};

float[] paletteWeights = {
  0.005,
  0.65,
  0.65,
  0.1,
  0.07,
  0.05,
  0.025,
  0.02,
  0.015,
  0.01,
  0.005,
  0.0025,
  0.001
};

void setup() {
  size(2080, 2080);
  noLoop();

  File folder = new File(sketchPath("output"));
  if (!folder.exists()) {
    folder.mkdir();
  }

  for (int i = 0; i < 999; i++) {
    generateFrame(i);
    saveFrame("output/frame" + nf(i, 4) + ".png");
  }
}

void generateFrame(int index) {
  color backgroundColor = pickWeightedColor(backgroundColors, backgroundWeights);
  background(backgroundColor);

  color[] currentPalette = generateRandomPalette();

  numRects = int(random(100, 5001));
  maxRectLength = random(100, 401);
  minRectLength = random(50, 201);
  rectWidth = random(10, 51);

  drawPattern(currentPalette);

  saveMetadata(index, backgroundColor, currentPalette);
}

color pickWeightedColor(color[] colors, float[] weights) {
  float r = random(1);
  float cumulativeWeight = 0;
  for (int i = 0; i < weights.length; i++) {
    cumulativeWeight += weights[i];
    if (r <= cumulativeWeight) {
      return colors[i];
    }
  }
  return colors[colors.length - 1];
}

color[] generateRandomPalette() {
  int paletteSize = pickWeightedIndex(paletteWeights) + 1;
  color[] palette = new color[paletteSize];
  for (int i = 0; i < paletteSize; i++) {
    palette[i] = baseColors[int(random(baseColors.length))];
  }
  return palette;
}

int pickWeightedIndex(float[] weights) {
  float r = random(1);
  float cumulativeWeight = 0;
  for (int i = 0; i < weights.length; i++) {
    cumulativeWeight += weights[i];
    if (r <= cumulativeWeight) {
      return i;
    }
  }
  return weights.length - 1;
}

void drawPattern(color[] currentPalette) {
  float centerX = width / random(2, 4);
  float centerY = height / random(1, 4);

  for (int i = 0; i < numRects; i++) {
    float t = map(i, 115, numRects, 68, TWO_PI * 300);
    float xOff = cos(t) * (50 + i / 1);
    float yOff = sin(t) * (50 + i / 1);

    float x = centerX + xOff;
    float y = centerY + yOff;
    float angle = atan2(yOff, xOff);

    float rectLength = random(minRectLength, maxRectLength);

    pushMatrix();
    translate(x, y);
    rotate(angle);
    fill(currentPalette[int(random(currentPalette.length))]);
    stroke(0);
    strokeWeight(4);
    rect(0, 0, rectLength, rectWidth);
    popMatrix();
  }
}

void saveMetadata(int index, color backgroundColor, color[] currentPalette) {
  JSONObject metadata = new JSONObject();

  metadata.setString("name", "lo #" + index);
  metadata.setString("description", "lo (" + index + ")");
  metadata.setString("image", "https://arweave.net/abcd1234xyz");

  metadata.setInt("numRects", numRects);
  metadata.setFloat("maxRectLength", maxRectLength);
  metadata.setFloat("minRectLength", minRectLength);
  metadata.setFloat("rectWidth", rectWidth);

  metadata.setString("background", colorToString(backgroundColor));
  metadata.setInt("paletteSize", currentPalette.length);

  JSONArray colors = new JSONArray();
  for (color c : currentPalette) {
    colors.append(colorToString(c));
  }
  metadata.setJSONArray("color_palette", colors);

  String filePath = sketchPath("output/metadata_" + nf(index, 4) + ".json");
  saveJSONObject(metadata, filePath);
}

String colorToString(color c) {
  return "rgb(" + (int)red(c) + "," + (int)green(c) + "," + (int)blue(c) + ")";
}
